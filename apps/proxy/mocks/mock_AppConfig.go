// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "prism/proxy/models"

	mock "github.com/stretchr/testify/mock"
)

// MockAppConfig is an autogenerated mock type for the AppConfig type
type MockAppConfig struct {
	mock.Mock
}

type MockAppConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAppConfig) EXPECT() *MockAppConfig_Expecter {
	return &MockAppConfig_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields:
func (_m *MockAppConfig) Get() models.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Config
	if rf, ok := ret.Get(0).(func() models.Config); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(models.Config)
	}

	return r0
}

// MockAppConfig_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAppConfig_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
func (_e *MockAppConfig_Expecter) Get() *MockAppConfig_Get_Call {
	return &MockAppConfig_Get_Call{Call: _e.mock.On("Get")}
}

func (_c *MockAppConfig_Get_Call) Run(run func()) *MockAppConfig_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAppConfig_Get_Call) Return(_a0 models.Config) *MockAppConfig_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_Get_Call) RunAndReturn(run func() models.Config) *MockAppConfig_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: envfile
func (_m *MockAppConfig) Init(envfile *string) error {
	ret := _m.Called(envfile)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(envfile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppConfig_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockAppConfig_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - envfile *string
func (_e *MockAppConfig_Expecter) Init(envfile interface{}) *MockAppConfig_Init_Call {
	return &MockAppConfig_Init_Call{Call: _e.mock.On("Init", envfile)}
}

func (_c *MockAppConfig_Init_Call) Run(run func(envfile *string)) *MockAppConfig_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *MockAppConfig_Init_Call) Return(_a0 error) *MockAppConfig_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_Init_Call) RunAndReturn(run func(*string) error) *MockAppConfig_Init_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0
func (_m *MockAppConfig) Set(_a0 models.Config) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Config) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAppConfig_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockAppConfig_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 models.Config
func (_e *MockAppConfig_Expecter) Set(_a0 interface{}) *MockAppConfig_Set_Call {
	return &MockAppConfig_Set_Call{Call: _e.mock.On("Set", _a0)}
}

func (_c *MockAppConfig_Set_Call) Run(run func(_a0 models.Config)) *MockAppConfig_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Config))
	})
	return _c
}

func (_c *MockAppConfig_Set_Call) Return(_a0 error) *MockAppConfig_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAppConfig_Set_Call) RunAndReturn(run func(models.Config) error) *MockAppConfig_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAppConfig creates a new instance of MockAppConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAppConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAppConfig {
	mock := &MockAppConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
