// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	models "prism/proxy/models"

	mock "github.com/stretchr/testify/mock"
)

// MockProxyRepository is an autogenerated mock type for the ProxyRepository type
type MockProxyRepository struct {
	mock.Mock
}

type MockProxyRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProxyRepository) EXPECT() *MockProxyRepository_Expecter {
	return &MockProxyRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: proxyId
func (_m *MockProxyRepository) Delete(proxyId string) error {
	ret := _m.Called(proxyId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(proxyId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProxyRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProxyRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - proxyId string
func (_e *MockProxyRepository_Expecter) Delete(proxyId interface{}) *MockProxyRepository_Delete_Call {
	return &MockProxyRepository_Delete_Call{Call: _e.mock.On("Delete", proxyId)}
}

func (_c *MockProxyRepository_Delete_Call) Run(run func(proxyId string)) *MockProxyRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProxyRepository_Delete_Call) Return(_a0 error) *MockProxyRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProxyRepository_Delete_Call) RunAndReturn(run func(string) error) *MockProxyRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *MockProxyRepository) Get(id uint64) (*models.Proxy, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Proxy
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*models.Proxy, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *models.Proxy); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Proxy)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProxyRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProxyRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uint64
func (_e *MockProxyRepository_Expecter) Get(id interface{}) *MockProxyRepository_Get_Call {
	return &MockProxyRepository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockProxyRepository_Get_Call) Run(run func(id uint64)) *MockProxyRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockProxyRepository_Get_Call) Return(_a0 *models.Proxy, _a1 error) *MockProxyRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProxyRepository_Get_Call) RunAndReturn(run func(uint64) (*models.Proxy, error)) *MockProxyRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockProxyRepository) GetAll() []models.Proxy {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Proxy
	if rf, ok := ret.Get(0).(func() []models.Proxy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Proxy)
		}
	}

	return r0
}

// MockProxyRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockProxyRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockProxyRepository_Expecter) GetAll() *MockProxyRepository_GetAll_Call {
	return &MockProxyRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockProxyRepository_GetAll_Call) Run(run func()) *MockProxyRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProxyRepository_GetAll_Call) Return(_a0 []models.Proxy) *MockProxyRepository_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProxyRepository_GetAll_Call) RunAndReturn(run func() []models.Proxy) *MockProxyRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: newProxy
func (_m *MockProxyRepository) Save(newProxy *models.Proxy) error {
	ret := _m.Called(newProxy)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Proxy) error); ok {
		r0 = rf(newProxy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProxyRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockProxyRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - newProxy *models.Proxy
func (_e *MockProxyRepository_Expecter) Save(newProxy interface{}) *MockProxyRepository_Save_Call {
	return &MockProxyRepository_Save_Call{Call: _e.mock.On("Save", newProxy)}
}

func (_c *MockProxyRepository_Save_Call) Run(run func(newProxy *models.Proxy)) *MockProxyRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Proxy))
	})
	return _c
}

func (_c *MockProxyRepository_Save_Call) Return(_a0 error) *MockProxyRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProxyRepository_Save_Call) RunAndReturn(run func(*models.Proxy) error) *MockProxyRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProxyRepository creates a new instance of MockProxyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProxyRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProxyRepository {
	mock := &MockProxyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
