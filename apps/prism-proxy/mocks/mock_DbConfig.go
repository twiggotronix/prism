// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockDbConfig is an autogenerated mock type for the DbConfig type
type MockDbConfig struct {
	mock.Mock
}

type MockDbConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbConfig) EXPECT() *MockDbConfig_Expecter {
	return &MockDbConfig_Expecter{mock: &_m.Mock}
}

// GetDatabaseName provides a mock function with given fields:
func (_m *MockDbConfig) GetDatabaseName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDbConfig_GetDatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseName'
type MockDbConfig_GetDatabaseName_Call struct {
	*mock.Call
}

// GetDatabaseName is a helper method to define mock.On call
func (_e *MockDbConfig_Expecter) GetDatabaseName() *MockDbConfig_GetDatabaseName_Call {
	return &MockDbConfig_GetDatabaseName_Call{Call: _e.mock.On("GetDatabaseName")}
}

func (_c *MockDbConfig_GetDatabaseName_Call) Run(run func()) *MockDbConfig_GetDatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbConfig_GetDatabaseName_Call) Return(_a0 string) *MockDbConfig_GetDatabaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConfig_GetDatabaseName_Call) RunAndReturn(run func() string) *MockDbConfig_GetDatabaseName_Call {
	_c.Call.Return(run)
	return _c
}

// GetHost provides a mock function with given fields:
func (_m *MockDbConfig) GetHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDbConfig_GetHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHost'
type MockDbConfig_GetHost_Call struct {
	*mock.Call
}

// GetHost is a helper method to define mock.On call
func (_e *MockDbConfig_Expecter) GetHost() *MockDbConfig_GetHost_Call {
	return &MockDbConfig_GetHost_Call{Call: _e.mock.On("GetHost")}
}

func (_c *MockDbConfig_GetHost_Call) Run(run func()) *MockDbConfig_GetHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbConfig_GetHost_Call) Return(_a0 string) *MockDbConfig_GetHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConfig_GetHost_Call) RunAndReturn(run func() string) *MockDbConfig_GetHost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPassword provides a mock function with given fields:
func (_m *MockDbConfig) GetPassword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPassword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDbConfig_GetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPassword'
type MockDbConfig_GetPassword_Call struct {
	*mock.Call
}

// GetPassword is a helper method to define mock.On call
func (_e *MockDbConfig_Expecter) GetPassword() *MockDbConfig_GetPassword_Call {
	return &MockDbConfig_GetPassword_Call{Call: _e.mock.On("GetPassword")}
}

func (_c *MockDbConfig_GetPassword_Call) Run(run func()) *MockDbConfig_GetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbConfig_GetPassword_Call) Return(_a0 string) *MockDbConfig_GetPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConfig_GetPassword_Call) RunAndReturn(run func() string) *MockDbConfig_GetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetPort provides a mock function with given fields:
func (_m *MockDbConfig) GetPort() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPort")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDbConfig_GetPort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPort'
type MockDbConfig_GetPort_Call struct {
	*mock.Call
}

// GetPort is a helper method to define mock.On call
func (_e *MockDbConfig_Expecter) GetPort() *MockDbConfig_GetPort_Call {
	return &MockDbConfig_GetPort_Call{Call: _e.mock.On("GetPort")}
}

func (_c *MockDbConfig_GetPort_Call) Run(run func()) *MockDbConfig_GetPort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbConfig_GetPort_Call) Return(_a0 string) *MockDbConfig_GetPort_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConfig_GetPort_Call) RunAndReturn(run func() string) *MockDbConfig_GetPort_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields:
func (_m *MockDbConfig) GetUser() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDbConfig_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockDbConfig_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
func (_e *MockDbConfig_Expecter) GetUser() *MockDbConfig_GetUser_Call {
	return &MockDbConfig_GetUser_Call{Call: _e.mock.On("GetUser")}
}

func (_c *MockDbConfig_GetUser_Call) Run(run func()) *MockDbConfig_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbConfig_GetUser_Call) Return(_a0 string) *MockDbConfig_GetUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDbConfig_GetUser_Call) RunAndReturn(run func() string) *MockDbConfig_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbConfig creates a new instance of MockDbConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbConfig {
	mock := &MockDbConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
